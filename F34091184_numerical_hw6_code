import numpy as np
import pandas as pd

A = np.array([
    [ 4, -1,  0, -1,  0,  0],
    [-1,  4, -1,  0, -1,  0],
    [ 0, -1,  4,  0,  1, -1],
    [-1,  0,  0,  4, -1, -1],
    [ 0, -1,  0, -1,  4, -1],
    [ 0,  0, -1,  0, -1,  4]
], dtype=float)
b = np.array([0, -1, 9, 4, 8, 6], dtype=float)
n = len(b)

def jacobi(A, b, x0=None, tol=1e-8, max_iter=1000):
    x = np.zeros_like(b) if x0 is None else x0.copy()
    D = np.diag(A)
    R = A - np.diagflat(D)
    for _ in range(max_iter):
        x_new = (b - np.dot(R, x)) / D
        if np.linalg.norm(x_new - x, np.inf) < tol:
            return x_new
        x = x_new
    return x

def gauss_seidel(A, b, x0=None, tol=1e-8, max_iter=1000):
    x = np.zeros_like(b) if x0 is None else x0.copy()
    for _ in range(max_iter):
        x_old = x.copy()
        for i in range(n):
            sigma = np.dot(A[i, :i], x[:i]) + np.dot(A[i, i + 1:], x_old[i + 1:])
            x[i] = (b[i] - sigma) / A[i, i]
        if np.linalg.norm(x - x_old, np.inf) < tol:
            return x
    return x

def sor(A, b, omega=1.1, x0=None, tol=1e-8, max_iter=1000):
    x = np.zeros_like(b) if x0 is None else x0.copy()
    for _ in range(max_iter):
        x_old = x.copy()
        for i in range(n):
            sigma = np.dot(A[i, :i], x[:i]) + np.dot(A[i, i + 1:], x_old[i + 1:])
            x[i] = (1 - omega) * x_old[i] + omega * (b[i] - sigma) / A[i, i]
        if np.linalg.norm(x - x_old, np.inf) < tol:
            return x
    return x

def conjugate_gradient(A, b, x0=None, tol=1e-8, max_iter=1000):
    x = np.zeros_like(b) if x0 is None else x0.copy()
    r = b - A @ x
    p = r.copy()
    for _ in range(max_iter):
        Ap = A @ p
        alpha = r @ r / (p @ Ap)
        x = x + alpha * p
        r_new = r - alpha * Ap
        if np.linalg.norm(r_new) < tol:
            return x
        beta = r_new @ r_new / (r @ r)
        p = r_new + beta * p
        r = r_new
    return x

x0 = np.zeros_like(b)

x_jacobi = jacobi(A, b, x0)
x_gs = gauss_seidel(A, b, x0)
x_sor = sor(A, b, omega=1.1, x0=x0)
x_cg = conjugate_gradient(A, b, x0)

df = pd.DataFrame({
    '(a)Jacobi': x_jacobi,
    '(b)Gauss-Seidel': x_gs,
    '(c)SOR': x_sor,
    '(d)conjugate gradient': x_cg
}, index=[f'x{i+1} |' for i in range(len(b))])

print(df.round(6)) 
